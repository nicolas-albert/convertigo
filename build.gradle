buildscript {
	repositories {
		jcenter()
	}
	
	dependencies {
		classpath "com.monochromeroad.gradle-plugins:gradle-aws-s3-sync:0.10"
	}
}

import com.monochromeroad.gradle.plugin.aws.s3.S3Sync
import org.apache.tools.ant.filters.ReplaceTokens
import groovy.xml.XmlUtil

apply from: 'headers.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

ext.convertigoVersion = '7.6.0'
ext.convertigoTag = ''
ext.convertigoCodename = 'osmium'
ext.convertigoCode = 'Os'
ext.convertigoRevision = hasProperty('convertigoRevision') ? convertigoRevision : ''
ext.jxBrowserVersion = '6.21'
ext.swaggerUiVersion = '3.19.3'

ext.convertigoEngineAPI = '7.6.0-SNAPSHOT'

ext.convertigoVersionFull = "${convertigoVersion}${convertigoTag.isEmpty() ? '' : '-' + convertigoTag}"
ext.currentYear = '' + Calendar.getInstance().get(Calendar.YEAR)

task updateVersion(dependsOn: [':engine:updateProductVersion', 'writeManifest']) {
	group 'convertigo'
	description 'Run this task after a Convertigo version change.'
}

eclipse {
	project {
		comment = 'Main project to develop the Convertigo platform'
	}
}

allprojects {
	version convertigoVersionFull
	
	repositories {
		mavenLocal()
		maven {
			url "https://m2.convertigo.com"
		}
		maven {
			url "http://maven.teamdev.com/repository/products"
		}
		jcenter()
	}
	
	if (project.name.startsWith('eclipse')) {
		apply plugin: 'eclipse'
	}
	
	if (project.name.startsWith('eclipse-plugin')) {
		apply plugin: 'java'
		
		sourceSets {
			main {
				java {
					exclude '.placeholder'
					srcDir 'src'
				}
				resources {
					exclude '.placeholder'
					srcDir 'src'
				}
			}
		}
		
		eclipse {
			project {
				natures 'org.eclipse.jdt.core.javanature',
						'org.eclipse.pde.PluginNature',
						'org.eclipse.buildship.core.gradleprojectnature'
				buildCommand 'org.eclipse.pde.ManifestBuilder'
				buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
			}
			
			classpath.file.withXml {
				def node = it.asNode()
				if (node.classpathentry.find { it.@path == 'org.eclipse.pde.core.requiredPlugins' } == null) {
					node.appendNode('classpathentry', [kind: 'con', path: 'org.eclipse.pde.core.requiredPlugins'])
				}
			}
		}
		
		task syncLib(type: Sync) {
			group 'convertigo'
			
			into 'lib'
			from configurations.runtime
		}
	}
	
	plugins.withId('java') {
		compileJava.options.encoding = 'UTF-8'
		sourceCompatibility = '1.8'
		targetCompatibility = '1.8'
	}
	
	afterEvaluate {
		if (plugins.hasPlugin('maven-publish')) {
			publishing {
				repositories {
					maven {
						url project.properties['c8o.m2.url']
						credentials(AwsCredentials) {
							accessKey project.properties['c8o.m2.ak']
							secretKey project.properties['c8o.m2.sk']
						}
					}
				}
			}
		}
	}
}

publishing {
	publications {
		engineApi (MavenPublication) {
			groupId 'com.convertigo.lib'
			artifactId 'convertigo-engine-api'
			version convertigoEngineAPI
			afterEvaluate {
			artifact project(':engine').engineApiJar
			pom.withXml {
				def dependencies = asNode().appendNode('dependencies')
				[
					'com.convertigo.twinsoft:api:2017.12.29',
					'com.convertigo.twinsoft:tas:2017.12.29',
					'com.convertigo.twinsoft:util:2017.12.29',
					'com.fasterxml.jackson.core:jackson-core:[2.8,2.9[',
					'commons-io:commons-io:[2.2,)',
					'javax.mail:mail:1.4',
					'javax.servlet:servlet-api:2.5',
					'log4j:log4j:[1.2,)',
					'org.apache.commons:commons-lang3:[3.4,)',
					'org.apache.httpcomponents:httpclient:[4.5,)',
					'org.codehaus.jettison:jettison:[1.3,)'
				].each {
					def values = it.split(':')
					def dependency = dependencies.appendNode('dependency')
					dependency.appendNode('groupId', values[0])
					dependency.appendNode('artifactId', values[1])
					dependency.appendNode('version', values[2])
				}
			}
		}
		}
		
		jxBrowserLicense (MavenPublication) {
			groupId 'com.convertigo.lib'
			artifactId 'jxbrowser-license'
			version '2018.04.03'
			artifact 'resources/jxbrowser-license.jar'
		}
		
		ojdbc (MavenPublication) {
			groupId 'com.convertigo.lib'
			artifactId 'ojdbc7'
			version '12.1.0.2'
			artifact 'resources/ojdbc7.jar'
		}
	}
}

afterEvaluate {
	ext.sharedManifest = project(':engine').manifest {
		attributes(
			'Bundle-ManifestVersion': '2',
			'Bundle-Vendor': 'Convertigo',
			'Bundle-Version': "${convertigoVersion}.qualifier",
			'Bundle-RequiredExecutionEnvironment': 'JavaSE-1.8',
		)
	}
}

task writeManifest(dependsOn:  ['updateEclipseVersion', 'makeSplash']) {
	group 'convertigo'
	
	def wm = getTasksByName 'writeManifest', true
	wm.remove tasks['writeManifest']
	wm.each { it.dependsOn ':updateEclipseVersion' }
	dependsOn wm
}

task buildStudio(type: Exec, dependsOn: ['writeManifest']) {
	group 'convertigo'
	
	onlyIf { !file('eclipse-repository/target/products').exists() }
	
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'mvn'
	} else {
		commandLine 'mvn'
	}
	
	args 'clean', 'install'
}

task updateEclipseProduct(type: Copy) {
	group 'convertigo'
	
	def aboutTextFile = file('eclipse-plugin-product/aboutText.txt')
	def licenseTextFile = file('license.txt')
	
	inputs.properties(
		'currentYear': currentYear,
		'convertigoVersionFull': convertigoVersionFull
	)
	inputs.files aboutTextFile, licenseTextFile
	
	def aboutText = ''
	def licenseText = ''
	
	doFirst {
		def xml = new XmlSlurper().parseText('<elt/>')
		xml.replaceBody aboutTextFile.text
			.replace('@CEMS_VERSION@', convertigoVersionFull)
			.replace('@CURRENT_YEAR@', currentYear)
		aboutText = XmlUtil.serialize(xml).replaceFirst('[\\d\\D]*<elt>([\\d\\D]*)</elt>[\\d\\D]*','$1')
		
		xml.replaceBody licenseTextFile.text
		licenseText = XmlUtil.serialize(xml).replaceFirst('[\\d\\D]*<elt>([\\d\\D]*)</elt>[\\d\\D]*','$1')
	}
	
	from 'eclipse-repository/Convertigo.product.tpl'
	filter { it.replace('@aboutText@', aboutText).replace('@licenseText@', licenseText) }
	into 'eclipse-repository'
	rename '.*', 'Convertigo.product'
}

task updateEclipseVersion(type: Exec, dependsOn: [':updateEclipseProduct', ':eclipse-plugin-product:writeAboutIni', ':eclipse-plugin-product:writePluginXml', ':eclipse-feature:updateFeature']) {
	group 'convertigo'
	
	def pom = file('pom.xml')
	
	onlyIf { !pom.text.contains("${convertigoVersion}-SNAPSHOT") }
	
	doLast {
		pom.text = pom.text.replaceFirst('(<!-- SET-VERSION -->		<version>).*(</version>)', "\$1${convertigoVersion}-SNAPSHOT\$2")
	}
	
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'mvn'
	} else {
		commandLine 'mvn'
	}
	
	args "-DnewVersion=${convertigoVersion}-SNAPSHOT", 'org.eclipse.tycho:tycho-versions-plugin:1.0.0:set-version'
}

task buildStudioClean(type: Delete) {
	group 'convertigo'
	
	delete 'eclipse-repository/target/products'
}

task generateEclipseConfiguration(dependsOn: [getTasksByName('cleanEclipse', true), getTasksByName('eclipse', true)]) {
	group 'convertigo'
}

task generateEclipseConfigurationWithManifest(dependsOn: ['generateEclipseConfiguration', 'writeManifest']) {
	group 'convertigo'
}

task makeSplash(dependsOn: 'convertigo-splash:run') {
	group 'convertigo'
}

task ciFirstStep(dependsOn: [':convertigo-templates:buildTemplates', ':engine:jar']) {
	group 'convertigo'
}